// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String   
  password String
  prompts  Prompt[]
  results  Result[]

  @@map("user")
}

model Prompt {
  id      Int     @id @default(autoincrement())
  content String
  userId  Int  // Modificado a String
  user    User    @relation(fields: [userId], references: [id])
  result  Result?
}

model Result {
  id        Int      @id @default(autoincrement())
  OKR       String
  createdAt DateTime @default(now())
  promptId  Int      @unique
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  userId    Int  // Modificado a String
  user      User    @relation(fields: [userId], references: [id])
}

// model User {
//   id            String    @id @default(cuid())  // Modificado a String y cuid()
//   email         String    @unique
//   firstName     String    @map("first_name")
//   lastName      String    @map("last_name")
//   password      String
//   prompts       Prompt[]
//   results       Result[]
//   accounts      Account[]  // Agregado
//   sessions      Session[]  // Agregado

//   @@map("user")
// }

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  
//   access_token       String?  
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }


// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Prompt {
//   id      Int     @id @default(autoincrement())
//   content String
//   userId  String  // Modificado a String
//   user    User    @relation(fields: [userId], references: [id])
//   result  Result?
// }

// model Result {
//   id        Int      @id @default(autoincrement())
//   OKR       String
//   createdAt DateTime @default(now())
//   promptId  Int      @unique
//   prompt    Prompt   @relation(fields: [promptId], references: [id])
//   userId    String  // Modificado a String
//   user      User    @relation(fields: [userId], references: [id])
// }

